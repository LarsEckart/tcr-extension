plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.larseckart'
version = '0.0.1'
archivesBaseName = 'junit-tcr-extensions'

repositories {
    mavenCentral()
}

dependencies {
    api "org.junit.jupiter:junit-jupiter-api:5.7.1"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.larseckart'
            artifactId 'junit-tcr-extensions'
            version '0.0.1'

            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourcesJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("sonatype.user") ?: System.getenv("SONATYPE_USERNAME")
                password = project.findProperty("sonatype.password") ?: System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'JUnit 5 extensions for test-commit-revert'
            name 'junit-tcr-extensions'
            url 'https://github.com/LarsEckart/tcr-extension'
            organization {
                name 'Lars Eckart'
                url 'https://larseckart.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/LarsEckart/tcr-extension/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/LarsEckart/tcr-extension/blob/main/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/LarsEckart/tcr-extension.git'
                connection 'git@github.com:LarsEckart/tcr-extension.git'
                developerConnection 'git@github.com:LarsEckart/tcr-extension.git'
            }
            developers {
                developer {
                    name 'Lars Eckart'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publish {
        dependsOn(project.tasks.build)
    }
}
